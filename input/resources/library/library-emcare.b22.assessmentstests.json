{
    "resourceType": "Library",
    "id": "emcareb22assessmentstests",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareb22assessmentstests",
    "identifier": [
        {
            "use": "official",
            "value": "emcare.b22.assessmentstests"
        }
    ],
    "version": "1.0.2",
    "name": "emcareb22assessmentstests",
    "title": "EmCare.B22.AssessmentsTests",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebase"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareobservation"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarevalueset"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarecombineddataelements"
        }
    ],
    "parameter": [
        {
            "name": "force-collection",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "AgeInMonths",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "Age auto-calculated (presented as number of years, months, days) of the client based on date of birth or estimated age or based on auto-calculation from estimaged date of birth",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "AgeInDays",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "a-BreastFeedingTest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-RespiratoryRate",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-BronchodilatorTest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-Hemoglobin",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-SecondTemperature",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-FluidTest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "Respiratory Rate profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "Respiratory Rate Second Count Profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "Fast Breathing profile",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "oftrp",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "DS",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "EmCare.B7.DE09",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "EmCare.B7.DE10",
            "use": "out",
            "type": "boolean"
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcareb22assessmentstests.cql",
            "contentType": "text/cql",
            "data": ""
        }
    ]
}