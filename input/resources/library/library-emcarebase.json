{
    "resourceType": "Library",
    "id": "emcarebase",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir//Library/emcarebase",
    "version": "1.0.2",
    "name": "emcarebase",
    "title": "EmCareBase",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        }
    ],
    "parameter": [
        {
            "name": "encounterid",
            "use": "in",
            "type": "string"
        }
    ],
    "dataRequirement": [
        {
            "type": "Patient",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Patient"
            ]
        },
        {
            "type": "Encounter",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Encounter"
            ]
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcarebase.cql",
            "contentType": "text/cql",
            "data": ""
        }
    ]
}